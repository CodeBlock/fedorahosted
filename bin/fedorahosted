#!/usr/bin/env python
# Fedora Hosted Processor
# Ricky Elrod <codeblock@fedoraproject.org>
# GPLv2+

import argparse
import urllib2
import json
import getpass
import socket
import sys
import os
import subprocess
import shlex
import ConfigParser
import ansible.runner
from fedora.client import AccountSystem

parser = argparse.ArgumentParser(description='Fedora Hosted Request CLI')
parser.add_argument('-n',
                    '--noop',
                    action='store_true',
                    help="Don't actually execute any commands.")
parser.add_argument('-v',
                    '--verbose',
                    action='store_true',
                    help="Be verbose, for debugging.")
parser.add_argument('-p',
                    '--process',
                    dest="REQUEST_ID",
                    help='Process a Fedora Hosted request (for admins).')
parser.add_argument('-r',
                    help='Request a new Fedora Hosted project.')
parser.add_argument('-s',
                    '--server',
                    dest="SERVER",
                    help='Server hosting the Fedora Hosted Request web app.')
parser.add_argument('-F',
                    '--fas-server',
                    dest="FAS_SERVER",
                    help='Path to the FAS server (passed to python-fedora).')
parser.add_argument('-m',
                    '--mailing-lists-server',
                    dest="LIST_SERVER",
                    help='Server hosting the Fedora Hosted mailing lists.')
parser.add_argument('-i',
                    '--private-key',
                    dest="PRIVATE_KEY",
                    help='The private SSH key we should authenticate to' \
                        'mailing list servers with.')
parser.add_argument('-c',
                    '--config',
                    dest="CONFIG",
                    default="/etc/fedorahosted/cli.conf",
                    help='A configuration file to use.')
args = parser.parse_args()

# Handle the config file here, if it exists.
config = None
if os.path.exists(args.CONFIG):
    config = ConfigParser.ConfigParser()
    config.read(args.CONFIG)


def get_option_value(argname, section, key, die=True, default=None,
                     warning=None):
    if argname in args.__dict__.keys() and args.__dict__[argname] != None:
        return args.__dict__[argname]
    elif config:
        return config.get(section, key)
    elif default:
        if warning:
            print '[warning] ' + warning
        else:
            print '[warning] No argument %s passed or config file setting ' \
                '%s.%s. Defaulting to %s.' % (argname, section, key, default)
        return default
    elif die:
        print "[error] Missing required argument %s (or config key: %s.%s)" \
            % (argname, section, key)
        sys.exit(1)
    else:
        return None

server = get_option_value('SERVER', 'fedorahosted_cli', 'server',
                          default='http://localhost:5000')

private_key = get_option_value('PRIVATE_KEY', 'fedorahosted_cli',
                               'private_key')

list_server = get_option_value('LIST_SERVER', 'fedorahosted_cli',
                               'mailing_lists_server')

fas_server = get_option_value('FAS_SERVER', 'fedorahosted_cli',
                              'fas_server')


def run_command_if_allowed(command):
    """
    Runs a system command and prints the result.
    "allowed" is determined by the state of args.noop.
    """
    print "[root@%s %s]# %s" % (
        socket.gethostname(),
        os.getcwd(),
        command)
    if args.noop:
        return
    escaped = shlex.split(command)
    cmd = subprocess.Popen(escaped,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)
    stdout, stderr = cmd.communicate()
    if stdout:
        print "[stdout] %s" % stdout.strip()
    if stderr:
        print "[stderr] %s" % stderr.strip()


def run_ansible_command_if_allowed(command, pattern):
    """Runs a command via ansible if not operating in no-op mode."""
    print "[ansible] pattern=%s command=%s" % (pattern, command)
    if args.noop:
        return
    return ansible.runner.Runner(pattern=pattern,
                                 forks=1,
                                 module_name='command',
                                 module_args=command).run()


def create_symlink(source, destination):
    print "Creating symlink from %s to %s." % (source, destination)
    if not args.noop:
        if os.path.isfile(destination):
            print "Removing existing destination: %s" % destination
            os.unlink(destination)
        os.symlink(source, destination)


def make_dir_and_cd(directory):
    """Make a directory and cd into it."""
    print "Creating and changing to directory: %s" % directory
    if not args.noop:
        os.mkdir(directory)
        os.chdir(directory)
        print "Working directory is now %s" % os.getcwd()


def verbose_print(text):
    """Prints a line if we are in verbose mode."""
    if args.verbose:
        print text


if args.noop:
    print
    print "*** Running in NO-OP mode, not executing any commands. ***"
    print "*** Not asking for FAS info, no FAS communication will happen. ***"
    print "If everything looks good below, run without -n/--noop"
    print

if args.REQUEST_ID:
    if not args.noop:
        user = getpass.getuser()
        if user != "root":
            print "Processing requests should be run as root."
            print "However, you can run with --noop as an unprivileged user."
            sys.exit(1)
        processor_username = raw_input("FAS username: ")
        processor_password = getpass.getpass("FAS password: ")

    request = urllib2.urlopen(server + '/getrequest?id=' +
                              args.REQUEST_ID,
                              timeout=5)  # Give up after 5 seconds.
    project = json.loads(request.read())

    verbose_print("Response from the webapp server: %s" % project)

    if 'error' in project:
        print "ERROR: %s" % project['error']
        sys.exit(1)

    if project['trac'] == 'agilo' and 'agilo' not in socket.gethostname():
        print "WARNING: The project requested a Trac instance with Agilo " \
            "and you're processing it on a host not configured for Agilo " \
            "Trac instances. If you're sure this is okay, type 'yes'. " \
            "Anything else will quit."
        if args.noop:
            print "> yes (skipping because of no-op mode)."
    elif raw_input("> ") != "yes":
        sys.exit(1)

    if project['comments']:
        print "This project has a comment/special request associated with it."
        print "-" * 80
        print project['comments']
        print "-" * 80
        raw_input("Press enter to continue...")

    project_group = str(project['scm'] + project['name'])

    print "Creating FAS group: " + project_group
    if not args.noop:
        fas = AccountSystem(fas_server,
                            username=processor_username,
                            password=processor_password)
        group_creation = fas.create_group(project_group,
                                          project['pretty_name'],
                                          str(project['owner']),
                                          project['scm'])

        if group_creation.tg_flash == None:
            print "FAS group creation FAILED. :-("
            sys.exit(1)
        else:
            print "FAS group created SUCCESSFULLY. :-)"

    run_command_if_allowed("fasClient -fi")

    # Process mailing lists
    # Process commit-lists here too so we don't have to iterate over these
    # again later on. Just shove them into an array.
    # TODO: This can probably move to a separate function.
    commit_lists = []
    for list_request in project['list_request']:
        list_name = list_request['mailing_list']['name']

        if list_request['commit_list']:
            verbose_print("%s is a commit-list." % list_name)
            commit_lists.append(list_name)

            if not list_name.endswith("@lists.fedorahosted.org"):
                verbose_print("Ignoring non @lists.fedorahosted.org list. " +
                              "Likely a remotely hosted commit-announce list.")
                pass

        command = '/usr/local/bin/fedora-mailing-list-setup %s %s' % (
            list_name,
            str(project['owner']))

        print "Creating mailing list via ansible: %s" % list_name
        run_ansible_command_if_allowed(command, 'hosted-lists*')

    # I wish Python had a switch/case equivalent.
    if project['scm'] == 'git':
        make_dir_and_cd("/git/%s.git" % project['name'])
        run_command_if_allowed("git --bare init --shared=true")

        print "Writing 'description' file."
        if not args.noop:
            with open("description", "w") as description:
                description.write(project['description'])

            create_symlink(
                "/usr/share/git-core/templates/hooks/post-update.sample",
                "hooks/post-update")

        # TODO: Is it worth pythonizing these one day?
        run_command_if_allowed("git update-server-info")
        run_command_if_allowed("find -type d -exec chmod g+s {} ;")
        run_command_if_allowed(
            "find -perm /u+w -a ! -perm /g+w -exec chmod g+w {} ;")
        run_command_if_allowed(
            "chown -R " + str(project['owner']) + ":" + project_group + " .")

        # Commit lists
        if len(commit_lists) != 0:
            run_command_if_allowed("git config hooks.mailinglist " +
                                   ','.join(commit_lists))
            run_command_if_allowed(
                "git config hooks.maildomain fedoraproject.org")
            run_command_if_allowed("git config hooks.emailprefix " +
                                   project['name'])
            run_command_if_allowed(
                "git config repouri 'http://git.fedorahosted.org/git/?p=" +
                project['name'] + ".git'")
            create_symlink("/usr/local/bin/git-notifier", "/post-receive")

    elif project['scm'] == 'hg':
        make_dir_and_cd("/hg/%s" % project['name'])
        run_command_if_allowed("hg init")
        run_command_if_allowed("find -type d -exec chmod g+s {} ;")
        run_command_if_allowed("chmod -R g+w .")
        run_command_if_allowed("chown -R root:%s ." % project_group)

        # Commit lists
        if len(commit_lists) != 0 and not args.noop:
            with open(".hg/hgrc", "w") as hgrc:
                hgrc.write("""
[extensions]
hgext.notify =

[hooks]
changegroup.notify = python:hgext.notify.hook

[email]
from = admin@fedoraproject.org

[smtp]
host = localhost

[web]
baseurl = http://hg.fedorahosted.org/hg

[notify]
sources = serve push pull bundle
test = False
config = /hg/%s/.hg/subscriptions
maxdiff = -1
""" % project['name'])
        with open(".hg/subscriptions", "w") as subscriptions:
            subscriptions.write("[usersubs]\n")
            for commit_list in commit_lists:
                subscriptions.write("%s = *\n" % commit_list)
        subscriptions.write("[reposubs]\n")
    elif project['scm'] == 'svn':
        do_things()

    # Stuff that occurs after the repo itself is made.
    if not args.noop:
        # Trac instance?
        if project['trac'] != 'no':
            run_command_if_allowed(
                "/usr/local/bin/hosted-setup.sh %s %s %s" % (project['name'],
                                                             project['owner'],
                                                             project['scm']))

        # If we've made it this far without dying somehow, then poke the server
        # and tell it to mark the request as completed (the FAS group will
        # exist already).
        request = urllib2.urlopen(server + '/mark-completed?id=' + \
                                      args.REQUEST_ID,
                                  timeout=5)  # Give up after 5 seconds.
        response = json.loads(request.read())
        if 'error' in response:
            print "*** ERROR ***"
            print "An error has occurred causing the server to NOT report " \
                "the project as completed."
            print "ERROR: %s" % response['error']
        else:
            print "*** SUCCESS ***"
            print "I've informed the fedorahosted web app that the project " \
                "has been created successfully. It should be sending an " \
                "email to the person who requested the project soon."
